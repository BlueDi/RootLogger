{"version":3,"sources":["RootIntro.js","RootForm.js","App.js","serviceWorker.js","index.js"],"names":["RootIntro","react_default","a","createElement","Image","centered","size","src","Component","factionsOptions","key","value","text","RootForm","state","searchQuery","winner","handleWinner","e","_ref","_this","setState","handleChangeFactions","_ref2","selected_factions","forEach","v","coise","find","f","push","handleSearchChange","_ref3","toggleSearch","search","target","checked","_this$state","this","played_factions","Form","Dropdown","fluid","selection","multiple","options","placeholder","onChange","onSearchChange","Button","type","App","Container","src_RootIntro","src_RootForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAeeA,mLAVX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,SACLC,IAAI,sIANYC,sBCAlBC,EAAkB,CACtB,CAACC,IAAK,KAAMC,MAAO,KAAMC,KAAM,mBAC/B,CAACF,IAAK,KAAMC,MAAO,KAAMC,KAAM,mBAC/B,CAACF,IAAK,KAAMC,MAAO,KAAMC,KAAM,qBAC/B,CAACF,IAAK,KAAMC,MAAO,KAAMC,KAAM,YAC/B,CAACF,IAAK,KAAMC,MAAO,KAAMC,KAAM,eAC/B,CAACF,IAAK,KAAMC,MAAO,KAAMC,KAAM,sBAwDlBC,6MApDbC,MAAQ,CACNC,YAAa,KACbJ,MAAO,GACPK,OAAQ,QAGVC,aAAe,SAACC,EAADC,GAAA,IAAKR,EAALQ,EAAKR,MAAL,OAAgBS,EAAKC,SAAS,CAACL,OAAQL,OACtDW,qBAAuB,SAACJ,EAADK,GAAgB,IAAXZ,EAAWY,EAAXZ,MACtBa,EAAoB,GACxBb,EAAMc,QAAQ,SAAAC,GACZ,IAAMC,EAAQlB,EAAgBmB,KAAK,SAAAC,GAAC,OAAIA,EAAEnB,MAAQgB,IAElD,OADAF,EAAkBM,KAAKH,GAChBA,IAETP,EAAKC,SAAS,CAACV,MAAOa,OAExBO,mBAAqB,SAACb,EAADc,GAAA,IAAKjB,EAALiB,EAAKjB,YAAL,OAAsBK,EAAKC,SAAS,CAACN,mBAE1DkB,aAAe,SAAAf,GAAC,OAAIE,EAAKC,SAAS,CAACa,OAAQhB,EAAEiB,OAAOC,mFAE3C,IAAAC,EAC2BC,KAAKxB,MAAhCyB,EADAF,EACAE,gBAAiBvB,EADjBqB,EACiBrB,OAExB,OACEf,EAAAC,EAAAC,cAACqC,EAAA,EAAD,KACEvC,EAAAC,EAAAC,cAACqC,EAAA,EAAKC,SAAN,CACEC,OAAK,EACLC,WAAS,EACTC,UAAQ,EACRV,QAAM,EACNW,QAASpC,EACTE,MAAO4B,EACPO,YAAY,sBACZC,SAAUT,KAAKhB,qBACf0B,eAAgBV,KAAKP,qBAEvB9B,EAAAC,EAAAC,cAACqC,EAAA,EAAKC,SAAN,CACEC,OAAK,EACLC,WAAS,EACTT,QAAM,EACNW,QAASP,KAAKxB,MAAMH,MACpBA,MAAOK,EACP8B,YAAY,oBACZC,SAAUT,KAAKrB,aACf+B,eAAgBV,KAAKP,qBAEvB9B,EAAAC,EAAAC,cAACqC,EAAA,EAAKS,OAAN,CAAaC,KAAK,UAAlB,kBA/Ce1C,sBCER2C,MATf,WACE,OACElD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd60d54b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Image } from \"semantic-ui-react\";\r\n\r\nclass RootIntro extends Component {\r\n  render() {\r\n    return (\r\n      <Image\r\n        centered\r\n        size=\"medium\"\r\n        src=\"https://cf.geekdo-images.com/imagepage/img/RhpM7ioEqBhBuSOwMpN5Vcqcztk=/fit-in/900x600/filters:no_upscale()/pic3791326.jpg\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RootIntro;\r\n","import React, {Component} from \"react\";\r\nimport {Form} from \"semantic-ui-react\";\r\n\r\nconst factionsOptions = [\r\n  {key: \"mc\", value: \"mc\", text: \"Marquise de Cat\"},\r\n  {key: \"ed\", value: \"ed\", text: \"Eyrie Dynasties\"},\r\n  {key: \"wa\", value: \"wa\", text: \"Woodland Alliance\"},\r\n  {key: \"vb\", value: \"vb\", text: \"Vagabond\"},\r\n  {key: \"lc\", value: \"lc\", text: \"Lizard Cult\"},\r\n  {key: \"rc\", value: \"rc\", text: \"Riverfolk Company\"}\r\n];\r\n\r\nclass RootForm extends Component {\r\n  state = {\r\n    searchQuery: null,\r\n    value: [],\r\n    winner: null\r\n  };\r\n\r\n  handleWinner = (e, {value}) => this.setState({winner: value});\r\n  handleChangeFactions = (e, {value}) => {\r\n    var selected_factions = [];\r\n    value.forEach(v => {\r\n      const coise = factionsOptions.find(f => f.key === v);\r\n      selected_factions.push(coise);\r\n      return coise;\r\n    });\r\n    this.setState({value: selected_factions});\r\n  };\r\n  handleSearchChange = (e, {searchQuery}) => this.setState({searchQuery});\r\n\r\n  toggleSearch = e => this.setState({search: e.target.checked});\r\n\r\n  render() {\r\n    const {played_factions, winner} = this.state;\r\n\r\n    return (\r\n      <Form>\r\n        <Form.Dropdown\r\n          fluid\r\n          selection\r\n          multiple\r\n          search\r\n          options={factionsOptions}\r\n          value={played_factions}\r\n          placeholder=\"Select the Factions\"\r\n          onChange={this.handleChangeFactions}\r\n          onSearchChange={this.handleSearchChange}\r\n        />\r\n        <Form.Dropdown\r\n          fluid\r\n          selection\r\n          search\r\n          options={this.state.value}\r\n          value={winner}\r\n          placeholder=\"Select the Winner\"\r\n          onChange={this.handleWinner}\r\n          onSearchChange={this.handleSearchChange}\r\n        />\r\n        <Form.Button type=\"submit\">Submit</Form.Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RootForm;\r\n","import React from \"react\";\r\nimport RootIntro from \"./RootIntro\";\r\nimport RootForm from \"./RootForm\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <RootIntro />\r\n      <RootForm />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}